/* tslint:disable */
/* eslint-disable */
/**
 * Text Similarity Service
 * A service to create, update, delete, and find similar text embeddings, storing them in a local vector database.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface EmbeddingsIdDelete404Response
 */
export interface EmbeddingsIdDelete404Response {
    /**
     * 
     * @type {string}
     * @memberof EmbeddingsIdDelete404Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface EmbeddingsPost201Response
 */
export interface EmbeddingsPost201Response {
    /**
     * The ID of the stored embedding.
     * @type {string}
     * @memberof EmbeddingsPost201Response
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddingsPost201Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface EmbeddingsPost409Response
 */
export interface EmbeddingsPost409Response {
    /**
     * 
     * @type {string}
     * @memberof EmbeddingsPost409Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface EmbeddingsPostRequest
 */
export interface EmbeddingsPostRequest {
    /**
     * A unique identifier for the text.
     * @type {string}
     * @memberof EmbeddingsPostRequest
     */
    'id': string;
    /**
     * The text to embed.
     * @type {string}
     * @memberof EmbeddingsPostRequest
     */
    'text': string;
    /**
     * Optional metadata associated with the text.
     * @type {{ [key: string]: any; }}
     * @memberof EmbeddingsPostRequest
     */
    'metadata'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface EmbeddingsPut404Response
 */
export interface EmbeddingsPut404Response {
    /**
     * 
     * @type {string}
     * @memberof EmbeddingsPut404Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface EmbeddingsPutRequest
 */
export interface EmbeddingsPutRequest {
    /**
     * The ID of the embedding to update.
     * @type {string}
     * @memberof EmbeddingsPutRequest
     */
    'id': string;
    /**
     * The new text to update the embedding with.
     * @type {string}
     * @memberof EmbeddingsPutRequest
     */
    'text': string;
    /**
     * Optional metadata to update along with the text.
     * @type {{ [key: string]: any; }}
     * @memberof EmbeddingsPutRequest
     */
    'metadata'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface SimilarPost200ResponseInner
 */
export interface SimilarPost200ResponseInner {
    /**
     * The ID of the similar text.
     * @type {string}
     * @memberof SimilarPost200ResponseInner
     */
    'id'?: string;
    /**
     * The similarity score between the provided text and this similar text.
     * @type {number}
     * @memberof SimilarPost200ResponseInner
     */
    'similarity'?: number;
    /**
     * Metadata associated with the similar text.
     * @type {{ [key: string]: any; }}
     * @memberof SimilarPost200ResponseInner
     */
    'metadata'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface SimilarPostRequest
 */
export interface SimilarPostRequest {
    /**
     * The text to find similar embeddings for.
     * @type {string}
     * @memberof SimilarPostRequest
     */
    'text'?: string;
    /**
     * The maximum number of similar texts to return.
     * @type {number}
     * @memberof SimilarPostRequest
     */
    'limit'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes all embeddings from the vector database.
         * @summary Remove all embeddings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embeddingsAllDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/embeddings/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the embedding associated with the specified ID.
         * @summary Delete an embedding by ID
         * @param {string} id The ID of the embedding to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embeddingsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('embeddingsIdDelete', 'id', id)
            const localVarPath = `/embeddings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Embeds provided text and stores it with the given ID and metadata. Supports large texts by splitting into multiple embeddings.
         * @summary Embed and store the text
         * @param {EmbeddingsPostRequest} embeddingsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embeddingsPost: async (embeddingsPostRequest: EmbeddingsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'embeddingsPostRequest' is not null or undefined
            assertParamExists('embeddingsPost', 'embeddingsPostRequest', embeddingsPostRequest)
            const localVarPath = `/embeddings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(embeddingsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the embedding of text with the specified ID.
         * @summary Update an existing embedding by ID
         * @param {EmbeddingsPutRequest} embeddingsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embeddingsPut: async (embeddingsPutRequest: EmbeddingsPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'embeddingsPutRequest' is not null or undefined
            assertParamExists('embeddingsPut', 'embeddingsPutRequest', embeddingsPutRequest)
            const localVarPath = `/embeddings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(embeddingsPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finds and returns IDs, similarity values, and metadata of texts that are most similar to the provided text based on a similarity threshold.
         * @summary Find similar texts
         * @param {SimilarPostRequest} similarPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        similarPost: async (similarPostRequest: SimilarPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'similarPostRequest' is not null or undefined
            assertParamExists('similarPost', 'similarPostRequest', similarPostRequest)
            const localVarPath = `/similar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(similarPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes all embeddings from the vector database.
         * @summary Remove all embeddings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async embeddingsAllDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.embeddingsAllDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.embeddingsAllDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes the embedding associated with the specified ID.
         * @summary Delete an embedding by ID
         * @param {string} id The ID of the embedding to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async embeddingsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.embeddingsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.embeddingsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Embeds provided text and stores it with the given ID and metadata. Supports large texts by splitting into multiple embeddings.
         * @summary Embed and store the text
         * @param {EmbeddingsPostRequest} embeddingsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async embeddingsPost(embeddingsPostRequest: EmbeddingsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddingsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.embeddingsPost(embeddingsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.embeddingsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the embedding of text with the specified ID.
         * @summary Update an existing embedding by ID
         * @param {EmbeddingsPutRequest} embeddingsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async embeddingsPut(embeddingsPutRequest: EmbeddingsPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.embeddingsPut(embeddingsPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.embeddingsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Finds and returns IDs, similarity values, and metadata of texts that are most similar to the provided text based on a similarity threshold.
         * @summary Find similar texts
         * @param {SimilarPostRequest} similarPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async similarPost(similarPostRequest: SimilarPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SimilarPost200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.similarPost(similarPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.similarPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Deletes all embeddings from the vector database.
         * @summary Remove all embeddings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embeddingsAllDelete(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.embeddingsAllDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the embedding associated with the specified ID.
         * @summary Delete an embedding by ID
         * @param {string} id The ID of the embedding to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embeddingsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.embeddingsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Embeds provided text and stores it with the given ID and metadata. Supports large texts by splitting into multiple embeddings.
         * @summary Embed and store the text
         * @param {EmbeddingsPostRequest} embeddingsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embeddingsPost(embeddingsPostRequest: EmbeddingsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddingsPost201Response> {
            return localVarFp.embeddingsPost(embeddingsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the embedding of text with the specified ID.
         * @summary Update an existing embedding by ID
         * @param {EmbeddingsPutRequest} embeddingsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        embeddingsPut(embeddingsPutRequest: EmbeddingsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.embeddingsPut(embeddingsPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Finds and returns IDs, similarity values, and metadata of texts that are most similar to the provided text based on a similarity threshold.
         * @summary Find similar texts
         * @param {SimilarPostRequest} similarPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        similarPost(similarPostRequest: SimilarPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<SimilarPost200ResponseInner>> {
            return localVarFp.similarPost(similarPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Deletes all embeddings from the vector database.
     * @summary Remove all embeddings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public embeddingsAllDelete(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).embeddingsAllDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the embedding associated with the specified ID.
     * @summary Delete an embedding by ID
     * @param {string} id The ID of the embedding to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public embeddingsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).embeddingsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Embeds provided text and stores it with the given ID and metadata. Supports large texts by splitting into multiple embeddings.
     * @summary Embed and store the text
     * @param {EmbeddingsPostRequest} embeddingsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public embeddingsPost(embeddingsPostRequest: EmbeddingsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).embeddingsPost(embeddingsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the embedding of text with the specified ID.
     * @summary Update an existing embedding by ID
     * @param {EmbeddingsPutRequest} embeddingsPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public embeddingsPut(embeddingsPutRequest: EmbeddingsPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).embeddingsPut(embeddingsPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finds and returns IDs, similarity values, and metadata of texts that are most similar to the provided text based on a similarity threshold.
     * @summary Find similar texts
     * @param {SimilarPostRequest} similarPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public similarPost(similarPostRequest: SimilarPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).similarPost(similarPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



